;========== C declarations ========================================================================

;; alloc
(decl @malloc (types u64) i8*)
(decl @free (types i8*) void)

;                     ptr newsize -> newptr
(decl @realloc (types i8* u64) i8*)
; remember to store newptr or keep it as a value as it might change from ptr

;                    len size
(decl @calloc (types u64 u64) i8*)

;; io
(decl @printf (types i8* ...)     i32)
(decl @puts   (types i8*)         i32)

;                    fd  src len
(decl @write  (types i32 i8* i64) i64)
; STDIN = 0, STDOUT = 1, STDERR = 2

;                    dest src len
(decl @memcpy (types i8* i8* u64) i8*)

;; file

;            filename, O_flags, S_mode -> fd:i32
(decl @open (types i8* i32 ...) i32)
; #define O_RDONLY	     00

;             file_descriptor, offset, SEEK_whence
(decl @lseek (types i32 i64 i32) i64)
; # define SEEK_END	2	/* Seek from end of file.  */

;            result:out i8*, length, prot, flags, fd, offset
(decl @mmap (types i8* u64 i32 i32 i32 i64) i8*)
; #define PROT_READ	0x1		/* Page can be read.  */
; #define MAP_PRIVATE	0x02		/* Changes are private.  */

;                    src len -> unisuccess
(decl @munmap (types i8* u64) i32)

;                   fd -> unisuccess
(decl @close (types i32) i32)

; GLOSSARY
; fd -> file descripter
; len -> length
; dst -> destination
; src -> source
; prot -> protocol
; unisuccess -> unix success: 0 success, -1 on failure and set ERRNO

;========== i8* methods ===========================================================================

(def @i8$ptr.length_ (params (%this i8*) (%acc u64)) u64 (do
  (if (== (load %this) 0) (do
    (return %acc)
  ))

  (return (call-tail @i8$ptr.length_ (args (cast i8* (+ 1 (cast u64 %this))) (+ %acc 1))))
))

(def @i8$ptr.length (params (%this i8*)) u64 (do
  (return (call-tail @i8$ptr.length_ (args %this 0)))
))

(def @i8$ptr.printn (params (%this i8*) (%n u64)) void (do
  (let %FD_STDOUT (+ 1 (0 i32)))
  (call @write (args %FD_STDOUT %this %n))
  (return-void)
))

(def @i8$ptr.copyalloc (params (%this i8*)) i8* (do
  (let %length (call @i8$ptr.length (args %this)))
  (let %allocated (call @malloc (args (+ %length 1))))
  (store 0 (cast i8* (+ %length (cast u64 %allocated))))
  (call @memcpy (args %allocated %this %length))
  (return %allocated)
))

(def @i8.print (params (%this i8)) void (do
  (auto %c i8)
  (store %this %c)  
  (let %FD_STDOUT (+ 1 (0 i32)))
  (call @write (args %FD_STDOUT %c 1))
  (return-void)
))

(def @println params void (do
  (auto %empty i8)
  (store 0 %empty)
  (call @puts (args %empty))
  (return-void)
))

;========== StringView ============================================================================

(struct %struct.StringView
  (%ptr i8*)
  (%size u64))

(def @StringView.makeEmpty params %struct.StringView (do
  (auto %result %struct.StringView)
  (store (cast i8* (0 i64)) (index %result 0))
  (store 0 (index %result 1))
  (return (load %result))
))

(def @StringView$ptr.set (params (%this %struct.StringView*) (%charptr i8*)) void (do
  (store %charptr (index %this 0))
  (store (call @i8$ptr.length (args %charptr)) (index %this 1))
  (return-void)
))

(def @StringView.make (params (%charptr i8*) (%size u64)) %struct.StringView (do
  (auto %result %struct.StringView)
  (store %charptr (index %result 0))
  (store %size (index %result 1))
  (return (load %result))
))

(def @StringView.makeFromi8$ptr (params (%charptr i8*)) %struct.StringView (do
  (auto %result %struct.StringView)
  (store %charptr (index %result 0))
  (store (call @i8$ptr.length (args %charptr)) (index %result 1))
  (return (load %result))
))

(def @StringView$ptr.print (params (%this %struct.StringView*)) void (do
  (call @i8$ptr.printn (args (load (index %this 0)) (load (index %this 1))))
  (return-void)
))

;========== String ================================================================================

(struct %struct.String
  (%ptr i8*)
  (%size u64)
)

(def @String.makeEmpty params %struct.String (do
  (auto %result %struct.String)
  (store (cast i8* (0 i64)) (index %result 0))
  (store 0 (index %result 1))
  (return (load %result))
))

(def @String$ptr.set (params (%this %struct.String*) (%charptr i8*)) void (do
  (store (call @i8$ptr.copyalloc (args %charptr)) (index %this 0))
  (store (call @i8$ptr.length (args %charptr)) (index %this 1))
  (return-void)
))

(def @String.copyalloc (params (%this %struct.String*)) %struct.String (do
  (auto %result %struct.String)
  (store (call @i8$ptr.copyalloc (args (load (index %this 0)))) (index %result 0))
  (store (load (index %this 1)) (index %result 1))
  (return (load %result))
))

(def @String.fromStringView (params (%other %struct.StringView*)) %struct.String (do
  (auto %result %struct.String)
  (store (call @i8$ptr.copyalloc (args (load (index %other 0)))) (index %result 0))
  (store (load (index %other 1)) (index %result 1))
  (return (load %result))
))

(def @String$ptr.free (params (%this %struct.String*)) void (do
  (call @free (args (load (index %this 0))))
  (return-void)
))

(def @String$ptr.append (params 
    (%this %struct.String*) 
    (%other %struct.String*)) void (do

  (let %same-string (== %this %other))
  (if %same-string (do
    (auto %temp-copy %struct.String)
    (store (call @String.copyalloc (args %other)) %temp-copy)

    (call @String$ptr.append (args %this %temp-copy))
    (call @free (args (load (index %temp-copy 0))))
    (return-void)
  ))

  (let %old-length (load (index %this 1)))
  (let %new-length (+ %old-length (load (index %other 1))))
  (store %new-length (index %this 1))
  (store 
    (call @realloc (args (load (index %this 0)) (+ 1 %new-length)))
    (index %this 0))
  (let %end-of-this-string (cast i8* (+ (cast u64 (load (index %this 0))) %old-length)))
  (call @memcpy (args
    %end-of-this-string 
    (load (index %other 0)) 
    (load (index %other 1))))
  
  (return-void)
))

(def @String$ptr.print (params (%this %struct.String*)) void (do
  (call-vargs @printf (args (load (index %this 0))))
  (return-void)
))

(def @String$ptr.println (params (%this %struct.String*)) void (do
  (call-vargs @puts (args (load (index %this 0))))
  (return-void)
))

;========== string table ==========================================================================

(str-table
  (0 "'%s' has length %lu.\0A\00")
  (1 "global string example\00")
  (2 "hello, \00")
  (3 "world\00")
  (4 "%lu\00")
  (5 "here \0A\00")
  (6 "todo.json\00")
  (7 "\00")
)

;========== string tests ==========================================================================

(def @test.strlen params void (do
  (call-vargs @printf (args 
    (str-get 0) (str-get 1) (call @i8$ptr.length (args (str-get 1)))))  
  (return-void)
))

(def @test.strview params void (do
  (auto %string-view %struct.StringView)
  (store (call @StringView.makeEmpty args) %string-view)
  (call @StringView$ptr.set (args %string-view (str-get 1)))
  (call-vargs @printf (args 
    (str-get 0) (load (index %string-view 0)) (load (index %string-view 1))))
  (return-void)
))

(def @test.basic-string params void (do
  (auto %string %struct.String)
  (call @String$ptr.set (args %string (str-get 1)))
  (call-vargs @printf (args
    (str-get 0) (load (index %string 0)) (load (index %string 1))))
  (return-void)
))

(def @test.string-self-append params void (do
  (auto %string %struct.String)
  (call @String$ptr.set (args %string (str-get 1)))
  (call @String$ptr.append (args %string %string))
  (call @puts (args (load (index %string 0))))
  (return-void)
))

(def @test.string-append-helloworld params void (do
  (auto %hello %struct.String)
  (call @String$ptr.set (args %hello (str-get 2)))

  (auto %world %struct.String)
  (call @String$ptr.set (args %world (str-get 3)))

  (call @String$ptr.append (args %hello %world))
  (call @puts (args (load (index %hello 0))))

  (return-void)
))

;========== File ==================================================================================

(struct %struct.File
  (%name %struct.String)
  (%file_descriptor i32))

(def @File.open (params (%filename-view %struct.StringView*)) %struct.File (do
  (let %O_RDONLY (+ 0 (0 i32)))

  (auto %result %struct.File)
  
  (let %filename (load (index %filename-view 0)))
  (store (call @String.fromStringView (args %filename-view)) (index %result 0))

  (let %fd (call-vargs @open (args %filename %O_RDONLY)))
  (store %fd (index %result 1))
  (return (load %result))
))

(def @File$ptr.getSize (params (%this %struct.File*)) i64 (do
  (let %SEEK_END (+ 2 (0 i32)))
  (return (call @lseek (args (load (index %this 1)) 0 %SEEK_END)))
))

(def @File$ptr.read (params (%this %struct.File*)) %struct.StringView (do
  (let %PROT_READ (+ 1 (0 i32)))
  (let %MAP_PRIVATE (+ 2 (0 i32)))

  (let %file-length (call @File$ptr.getSize (args %this)))
  (let %char-ptr (call @mmap (args (cast i8* (0 u64)) %file-length %PROT_READ %MAP_PRIVATE (load (index %this 1)) 0)))
  (return (call @StringView.make (args %char-ptr %file-length)))
))

(def @File.unread (params (%view %struct.StringView*)) void (do
  (call @munmap (args (load (index %view 0)) (load (index %view 1))))
  (return-void)
))

(def @File$ptr.close (params (%this %struct.File*)) void (do
; TODO
  (call @close (args (load (index %this 1))))
  (return-void)
))

;========== File tests ============================================================================

(def @test.file-cat params void (do
  (auto %filename %struct.StringView)
  (call @StringView$ptr.set (args %filename (str-get 6)))
  
  (auto %file %struct.File)
  (store (call @File.open (args %filename)) %file)
  
; print file name
  (call @String$ptr.println (args (index %file 0)))

  (auto %content %struct.StringView)
  (store (call @File$ptr.read (args %file)) %content)

  (call @StringView$ptr.print (args %content))

  (call @File.unread (args %content))
  (call @File$ptr.close (args %file))

  (return-void)
))

;========== Reader ================================================================================

(struct %struct.Reader
  (%content %struct.StringView)
  (%iter i8*)
  (%prev i8)
)

(def @Reader$ptr.set (params (%this %struct.Reader*) (%string-view %struct.StringView*)) void (do
  (store (load %string-view) (index %this 0))
  (store (load (index %string-view 0)) (index %this 1))
  (store 0 (index %this 2))
  (return-void)
))

(def @Reader$ptr.peek (params (%this %struct.Reader*)) i8 (do
  (return (load (load (index %this 1))))
))

(def @Reader$ptr.get (params (%this %struct.Reader*)) i8 (do
  (let %iter-ref (index %this 1))
  (let %char (load (load %iter-ref)))
  (store %char (index %this 2))
  (store (cast i8* (+ 1 (cast u64 (load %iter-ref)))) %iter-ref)
  (return %char)
))

(def @Reader$ptr.pos (params (%this %struct.Reader*)) u64 (do
  (let %iter (load (index %this 1)))
  (let %start (load (index (index %this 0) 0)))
  (let %result (- (cast u64 %iter) (cast u64 %start)))
  (return %result)
))

; a Reader is done when %iter points to the end of %content
(def @Reader$ptr.done (params (%this %struct.Reader*)) i1 (do
  (let %content (index %this 0))
  (let %content-end (cast i8* (+ 
    (cast u64 (load (index %content 0)))
    (load (index %content 1))
  )))
  (let %iter (load (index %this 1)))
  (return (== %iter %content-end))
))

(def @Reader$ptr.reset (params (%this %struct.Reader*)) void (do
  (let %string-view (index %this 0))
  (store (load (index %string-view 0)) (index %this 1))
  (store 0 (index %this 2))
  (return-void)
))

;========== Reader tests ==========================================================================

(def @test.Reader-get$lambda0 (params (%reader %struct.Reader*) (%i i32)) void (do
  (if (== %i 0) (do
    (return-void)
  ))
  (call @i8.print (args (call @Reader$ptr.get (args %reader))))
  (call-tail @test.Reader-get$lambda0 (args %reader (- %i 1)))
  (return-void)
))

(def @test.Reader-get params void (do
  (auto %filename %struct.StringView)
  (call @StringView$ptr.set (args %filename (str-get 6)))
  
  (auto %file %struct.File)
  (store (call @File.open (args %filename)) %file)
  
; print file name
  (call @String$ptr.println (args (index %file 0)))

  (auto %content %struct.StringView)
  (store (call @File$ptr.read (args %file)) %content)

; print content
; (call @StringView$ptr.print (args %content))

  (auto %reader %struct.Reader)
  (call @Reader$ptr.set (args %reader %content))

  (call @test.Reader-get$lambda0 (args %reader 50))

  (call @println args)

  (call @File.unread (args %content))
  (call @File$ptr.close (args %file))
  (return-void)
))

(def @test.Reader-done$lambda0 (params (%reader %struct.Reader*)) void (do
  (call @i8.print (args (call @Reader$ptr.get (args %reader))))
  (if (- 1 (call @Reader$ptr.done (args %reader))) (do
    (call-tail @test.Reader-done$lambda0 (args %reader))
  ))
  (return-void)
))

(def @test.Reader-done params void (do
  (auto %filename %struct.StringView)
  (call @StringView$ptr.set (args %filename (str-get 6)))
  
  (auto %file %struct.File)
  (store (call @File.open (args %filename)) %file)
  
; print file name
  (call @String$ptr.println (args (index %file 0)))

  (auto %content %struct.StringView)
  (store (call @File$ptr.read (args %file)) %content)

; print content
; (call @StringView$ptr.print (args %content))

  (auto %reader %struct.Reader)
  (call @Reader$ptr.set (args %reader %content))

  (call @test.Reader-done$lambda0 (args %reader))

  (call @println args)

  (call @File.unread (args %content))
  (call @File$ptr.close (args %file))
  (return-void)
))

;========== main program ==========================================================================

(def @u64.print (params (%this u64)) void (do
  (call-vargs @printf (args (str-get 4) %this))
  (return-void)
))

(def @main params i32 (do
  (call @test.Reader-done args)
  (return 0)
))
