;========== C declarations ========================================================================

; alloc
(decl @malloc (types u64) i8*)
(decl @free (types i8*) void)
(decl @realloc (types i8* u64) i8*)

; io
(decl @printf (types i8* ...) i32)
(decl @puts   (types i8*) i32)

; parameters are (destination, source, byte count)
(decl @memcpy (types i8* i8* u64) i8*)

; file

;            filename, O_flags, S_mode -> file_descriptor:i32
(decl @open (types i8* i32 ...) i32)
; #define O_RDONLY	     00

;             file_descriptor, offset, SEEK_whence
(decl @lseek (types i32 i64 i32) i64)
; # define SEEK_END	2	/* Seek from end of file.  */

;            result:out i8*, length, prot, flags, fd, offset
(decl @mmap (types i8* u64 i32 i32 i32 i64))
; #define PROT_READ	0x1		/* Page can be read.  */
; #define MAP_PRIVATE	0x02		/* Changes are private.  */

;========== i8* methods ===========================================================================

(def @i8$ptr.length_ (params (%this i8*) (%acc u64)) u64 (do
  (if (== (load %this) 0) (do
    (return %acc)
  ))

  (return (call-tail @i8$ptr.length_ (args (cast i8* (+ 1 (cast u64 %this))) (+ %acc 1))))
))

(def @i8$ptr.length (params (%this i8*)) u64 (do
  (return (call-tail @i8$ptr.length_ (args %this 0)))
))

;========== StringView ============================================================================

(struct %struct.StringView
  (%ptr i8*)
  (%size u64))

(def @StringView.makeEmpty params %struct.StringView (do
  (auto %result %struct.StringView)
  (store (cast i8* (i64 0)) (index %result 0))
  (store 0 (index %result 1))
  (return (load %result))
))

(def @StringView$ptr.set (params (%this %struct.StringView*) (%charptr i8*)) void (do
  (store %charptr (index %this 0))
  (store (call @i8$ptr.length (args %charptr)) (index %this 1))
  (return-void)
))

;========== String ================================================================================

(struct %struct.String
  (%ptr i8*)
  (%size u64)
)

(def @String.makeEmpty params %struct.String (do
  (auto %result %struct.String)
  (store (cast i8* (i64 0)) (index %result 0))
  (store 0 (index %result 1))
  (return (load %result))
))

(def @i8$ptr.copyalloc (params (%this i8*)) i8* (do
  (let %length (call @i8$ptr.length (args %this)))
  (let %allocated (call @malloc (args (+ %length 1))))
  (store 0 (cast i8* (+ %length (cast u64 %allocated))))
  (call @memcpy (args %allocated %this %length))
  (return %allocated)
))

(def @String$ptr.set (params (%this %struct.String*) (%charptr i8*)) void (do
  (store (call @i8$ptr.copyalloc (args %charptr)) (index %this 0))
  (store (call @i8$ptr.length (args %charptr)) (index %this 1))
  (return-void)
))

(def @String.copyalloc (params (%this %struct.String*)) %struct.String (do
  (auto %result %struct.String)
  (store (call @i8$ptr.copyalloc (args (load (index %this 0)))) (index %result 0))
  (store (load (index %this 1)) (index %result 1))
  (return (load %result))
))

(def @String.fromStringView (params (%other %struct.StringView*)) %struct.String (do
  (auto %result %struct.String)
  (store (call @i8$ptr.copyalloc (args (load (index %other 0)))) (index %result 0))
  (store (load (index %other 1)) (index %result 1))
  (return (load %result))
))

(def @String$ptr.append (params 
    (%this %struct.String*) 
    (%other %struct.String*)) void (do

  (let %same-string (== %this %other))
  (if %same-string (do
    (auto %temp-copy %struct.String)
    (store (call @String.copyalloc (args %other)) %temp-copy)

    (call @String$ptr.append (args %this %temp-copy))
    (call @free (args (load (index %temp-copy 0))))
    (return-void)
  ))

  (let %old-length (load (index %this 1)))
  (let %new-length (+ %old-length (load (index %other 1))))
  (store %new-length (index %this 1))
  (store 
    (call @realloc (args (load (index %this 0)) (+ 1 %new-length)))
    (index %this 0))
  (let %end-of-this-string (cast i8* (+ (cast u64 (load (index %this 0))) %old-length)))
  (call @memcpy (args
    %end-of-this-string 
    (load (index %other 0)) 
    (load (index %other 1))))
  
  (return-void)
))

;========== string table ==========================================================================

(str-table
  (0 "'%s' has length %lu.\0A\00")
  (1 "global string example\00")
  (2 "hello, \00")
  (3 "world\00")
  (4 "%lu\00")
  (5 "here \0A\00")
)

;========== string tests ==========================================================================

(def @test.strlen params void (do
  (call-vargs @printf (args 
    (str-get 0) (str-get 1) (call @i8$ptr.length (args (str-get 1)))))  
  (return-void)
))

(def @test.strview params void (do
  (auto %string-view %struct.StringView)
  (store (call @StringView.makeEmpty args) %string-view)
  (call @StringView$ptr.set (args %string-view (str-get 1)))
  (call-vargs @printf (args 
    (str-get 0) (load (index %string-view 0)) (load (index %string-view 1))))
  (return-void)
))

(def @test.basic-string params void (do
  (auto %string %struct.String)
  (call @String$ptr.set (args %string (str-get 1)))
  (call-vargs @printf (args
    (str-get 0) (load (index %string 0)) (load (index %string 1))))
  (return-void)
))

(def @test.string-self-append params void (do
  (auto %string %struct.String)
  (call @String$ptr.set (args %string (str-get 1)))
  (call @String$ptr.append (args %string %string))
  (call @puts (args (load (index %string 0))))
  (return-void)
))

(def @test.string-append-helloworld params void (do
  (auto %hello %struct.String)
  (call @String$ptr.set (args %hello (str-get 2)))

  (auto %world %struct.String)
  (call @String$ptr.set (args %world (str-get 3)))

  (call @String$ptr.append (args %hello %world))
  (call @puts (args (load (index %hello 0))))

  (return-void)
))

;========== Reader ================================================================================

(struct %struct.Reader
  (content %struct.StringView)
  (iter i8*)
)

(def @Reader$ptr.set (params (%this %struct.Reader*) (%string-view %struct.StringView*)) void (do
  (store (load %string-view) (index %this 0))
  (let %iter (load (index %string-view 0)))
  (store %iter (index %this 1))
  (return-void)
))

(def @Reader.fromFile (params) %struct.Reader (do
  (auto %result %struct.Reader)
  (let %SEEK_END (+ 2 (0 i32)))
  (let %PROT_READ (+ 1 (0 i32)))
  (let %MAP_PRIVATE (+ 2 ( 0 i32)))
  (return (load %result))
))

;========== File ==================================================================================

(struct %struct.File
  (name %struct.String)
  (file_descriptor i32))

(def @File.open (params (%filename-view %struct.StringView*)) %struct.File (do
  (let %O_RDONLY (+ 0 (0 i32)))

  (auto %result %struct.File)
  
  (let %filename (load (index %filename-view 0)))
  (store (call @String.fromStringView (args %filename-view)) (index %result 0))

  (let %fd (call-vargs @open (args %filename %O_RDONLY)))
  (store %fd (index %result 1))
  (return (load %result))
))

;========== main program ==========================================================================

(def @u64.print (params (%this u64)) void (do
  (call-vargs @printf (args (str-get 4) %this))
  (return-void)
))

(def @main params i32 (do
  (call @test.string-append-helloworld args)
  (return 0)
))
